ActiveRecord Models and Rails
Active record is the built in ORM that rails Utilizes to manage the model aspects of an application.
What is an ORM?
An ORM is an Object Relational Mapping System- essentially this is the module that enables your application to manage data in a method driven structure. This means that you are able to run queries, ass records and perform all of the traditional database processes by leveraging methods as apposed to writing SQL manually.

For example below is the traditional way that we wourl query a database of 'posts' using SQL. :

 SELECT * FROM posts

compared with leveraging Active Record:

Post.all

By using AR, you are also able to perform advanced query tasks such as method chaining and scoping, which typically require less code an make for a more readable query.

Active Record Models

So if we have a database table, why do we need a model file? By using model files we are able to create an organized layer of abstraction for our data. An important thing to remember is that at the end of the day the model file is a Ruby class.
It will typically inherit from the ActiveRecord:: Base class, which means that it has access to a number of methods that assist in working with the database. However you can treat it like a regular Ruby class, allowing you to create methods, data attributes and everything else that you would want to do in a class file.
A typical model file will contain code such as but not limited to the following:
-Custom scopes
-Model instance methods
-Default settings for database columns
-validations
- Model to model relationships
- callbacks
- custom algorithms
If any/all of the items above are not familiar to you yet don't worry. We will cover them in future lessons. Its important to have an idea of what can me included in a model file, even at this early stage.
